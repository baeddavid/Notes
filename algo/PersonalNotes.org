#+TITLE: Personal Notes
* Binary Trees
** Global Variable
I need to get better at using global variables. Take the following java code that constructs a tree from a preorder traversal for example:
#+BEGIN_SRC java
class ConstructTree {
    // This is a global variable we are going to use to keep track of our position in the list to create our preorder tree.
    public static int globalIndex;

    public static constructTreeFromPreorder(List<Integer> preorder) {
        if(preorder == null) {
            return null;
        }

        globalIndex = 0;
        return constructer(preorder, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    private static constructer(List<Integer> preorder, Integer lowerBound, Integer upperBound) {
        // If the global index is at the end of the array we have finished constructing the tree and can return null.
        if(globalIndex == preorder.size() || preorder[globalIndex] < lowerBound || preorder[globalIndex] > upperBound) {
            return null;
        }

        // In a preorder traversal, the element at globalIndex is the root of a subtree. Since a preorder traversal travels down the left subtree first construct the left subtree first.
        TreeNode root = new TreeNode(preorder.get(globalIndex++));
        // We adjust the boundaries for the tree depending on the root.
        root.left = constructer(preorder, lowerBound, root.val);
        root.right = constructer(preorder, root.val, upperBound);
        return root;
    }
}
#+END_SRC
We used a global variable to avoid using a linear scan at every recursive level which would lead to a polynomial time complexity. Another example of using a global variable is checking if a tree is height balanced.

#+BEGIN_SRC java
class BalancedTree {
    // Our boolean global variable that tells us if the tree is balanced
    public static boolean isBalanced;

    public static boolean isTreeBalanced(TreeNode root) {
        // We set the global variable to true when we call the function
        isBalanced = true;
        getHeight(root);
        // Return isBalanced. The state of this variable will be updated if the height is unbalanced by the getHeight function.
        return isBalanced;
    }

    public static int getHeight(TreeNode root) {
        if(root == null) {
            return 0;
        }

        int leftSize = getHeight(root.left);
        int rightSize = getHeight(root.right);
        // If the absolute difference between the size of the left subtree and the size of the right subtree is greater than 1 then set the global isBalanced to false.
        if(Math.abs(leftSize - rightSize) > 1) {
            isBalanced = false;
        }

        return Math.max(leftSize, rightSize) + 1;
    }
}
#+END_SRC
** Understanding What the Root Represents(BST)
There are certain questions where I get confused/stuck because I was unable to identify all given information I had. In a BST identifying the root means two things.

1. Obviously we have the root which is good.
2. More significantly we have the upper bound for the left subtree and the lower bound for the right subtree.

Generally if I am able to identify the root I have found some important information. Whether it be boundaries for subtrees or a base case for recursion, I should spend more time identifying the given information I have.

An example of what the root represents:
#+BEGIN_SRC java
public TreeNode constructTreeFromPreorderInorder(int[] inorder, int[] preorder) {
    return helper(preorder, 0, preorder.length, 0, inorder.length, IntStream(0, inorder.length).boxed()
                  .collect(Collectors.toMap(i -> inorder[i], i -> i)));
}

private TreeNode helper(int[] preorder, int pStart, int pEnd, int iStart, int iEnd, Map<Integer, Integer> inorderIdx) {
    if(pStart >= pEnd || iStart >= iEnd) {
        return null;
    }

    // We can find the root of the tree because the first element in the preorder sequence is the root of the tree.
    TreeNode root = new TreeNode(preorder.get(pStart));
    // So what are the implications of knowing the root?
    // Well we can find where the root is in the inorder sequence. All elements left of the root in the inorder sequence are elements that belong to the left subtree. The opposing logic applies in that all elements right of the root are elements that belong to the right subtree.
    // Because we know where the index of the root is, we can find the size of the left subtree. This is all the information we need. We know that the left subtree of the root is going to consist of all the elements from pstart + 1 to the size of the left subtree and all elements from iStart to the index of the root in I.
    int inorderRootIdx = inorderIdx.get(root.val);
    int leftSubTreeSize = inorderIdx - iStart;

    root.left = helper(preorder, pStart + 1, pStart + 1 + leftSubTreeSize, iStart, inorderRootIdx, inorderIdx);
    root.right = helper(preorder, pStart + 1 + leftSubTreeSize, pEnd, inorderIdx + 1, iEnd, inorderIdx);
    return root;
}
#+END_SRC

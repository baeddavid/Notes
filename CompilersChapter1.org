#+TITLE: Compilers Chapter1
#+DESCRIPTION: Notes on compilers chapter 1
#+Author: David Bae

* Language Processors
** A compiler is a program that can read a program in one language -- the source language -- and translate it into an equivalent program in another language -- the target language.
*** Source Program --> [Compiler] --> Target Program
** An interpreter is another common kind of language processor. Instead of producing a target program as a translation, an interpreter appears to directly execute the operations specified in the source program on inputs supplied by the user.
*** Source Program AND Input --> [Interpter] --> Output
** A source program may be divided into modules stored in seperate files. The task of collecting the source program is sometimes entrusted to a seperate program called a preprocessor. The preprocessor may also expand shorthands called macros into source language statements.
*** The modified source language is then fed into a compiler. The comiler may produce an assembly-language program as its output, because assembly language is easier to produce as output and is easier to debug. The aseembly language is then processed by another program called an assembler that produces relocatable machine code as its output.
**** Large programs are often compiled in pieces, so the relocatable machine code may have to be linked together with other relocatable object files and library files into the code that actually runs the machine. The linker resolves external memory addresses. The loader then puts together all the executable object files into memory for execution.
* Exercises for section 1.1
** Exercise 1.1.1: What is the difefrence between a compiler and an interpreter?
*** A compiler is a program that reads a program in one language called the source language and translates it into an equivalent program. Interpreters on the other hand does not produce a target language. Instead it directly executes the program as specified by the user
** Exercise 1.1.2: What are the advantages of (a) a compiler over an an interpreter (b) an interpreter over a compiler?
*** The machine language target program produced by a compiler is usually much faster than an interpreter at mapping inputs to outputs. However an interpreter gives better error diagnostics than a compiler, because it directly executes the source program statement by statement.
** Exercise 1.1.3: What advantages are there to a language-processing system in which the compiler produces assembly language rather than machine language?
*** Assembly is easier to produce and debug than machine code.
** Exercise 1.1.4: A compiler that translates a high-level language into another high-level language is called a source-to-source translator. What advantages are there to using C as a target language for a compiler.
*** Translating a high-level language to another high-level language shares the same benefits of producing assembly code, just more exaccerbated. Producing a target program in C means that code will be both easier to produce and easier to debug.
** Exercise 1.1.5: Describe some of the tasks than an assembler needs to perform.
*** An assembler produces relocatable machine code as its output. This is significant since large programs are often compiled in pieces. Having smaller chunks of relocatable machine code means that we are able to link them together.
* Structure of a Compiler
** Analysis
*** Analysis breaks up the source program into constituent pieces and imposes a grammatical structure on them. It then uses this structure to create an intermediate representation of the source program. If the analysis part detects that the source program is either syntactically ill formed or semantically unsound, then it must provide informative messages.
*** The Analysis part also collects information about the source program and stores it ina  data structure called a symbol table, which is passed along with the intermediate representation to the synthesis part.
** Synthesis
*** The synthesis part constructs the desired target program from the intermediate representation and the information in the symbol table.
** The analysis part is often called the front end and the synthesis part is called the back end.
* Lexical Analysis
** The first phase of a compiler is called lexical analysis or scanning.
*** The lexical analyzer reads the stream of characters making up the source program and groups the characters into meaningful sequences called lexemes. For each lexeme, the lexical analyzer produces as output a token of the form
**** <token-name, attribute-value>
***** In the token, the first component "token-name" is an abstract symbol that is used during syntax analysis.
***** The second component "attribute-value" points to an entry in the symbol table for this token.
****** Information from the symbol-table entry is needed for semantic analysis and code generation.
*** Example of token parsing
#+BEGIN_SRC java
int position = initial + rate * 60
#+END_SRC
**** position is a lexeme that would be mapped into a token <id, 1> where id is an abstract symbol standing for identifier and 1 points to the symbol-table entry for position.
**** The assignment symbol = is a elxeme that is mapped into the token <=>. Since this token needs no attribute-value, we have omitted the second component. We could have used any abstract symbol such as assign for the token-name, but for notational convenience we have chosen to use the lexeme itself.
**** initial is a lexeme that is mapped into the token <id, 2> where 2 points to the symbol-table entry for initial.
**** + is a lexeme that is mapped to the lexeme <+>
**** rate is a lexeme that is mapped to the token <id, 3>, where 3 points to the symbol-table entry for rate.
**** * is a lexeme that is mapped into the token <*>.
**** 60 is a lexeme that is mapped into the token <60>.
***** <id, 1> <=> <id,2> <+> <id,3> <*> <60>
*** It passes on to the subsequent phase, syntax analysis.
* Syntax Analysis
** The second phase of the compiler is Syntax Analysis or Parsing.
*** The parser uses the first componenets of the tokens produced by the lexical analyzer to create a tree-like intermediate representation that depicts the grammatical structure of the token stream.
**** A typical representation is a syntax-tree in which each interior node represents an operation and the children of the node represent the arguments of the operation.
* Calls
** Call-by-Value
*** The actual parameter is evaluated or copied. The value is placed in the location belonging to the corresponding formal parameter of the called procedure. This method is used in C and Java.
*** Call-by-Value has the effect that all computation involving the fomal parameters done by the called procedure is local to that procedure and the actual parameters themselves cannot be changed.
** Call-by-Reference
*** The address of the actual parameter is passed to the callee as the value of the corresponding formal parameter. Uses of the formal parameter in the code of the callee are implemented by following this pointer to the location indicated by the caller.
